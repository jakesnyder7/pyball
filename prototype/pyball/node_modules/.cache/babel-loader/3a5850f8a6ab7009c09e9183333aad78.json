{"ast":null,"code":"var _jsxFileName = \"/Users/Marion/Desktop/csci335/pyball/prototype/pyball/src/ManipulateSpreadsheet/ManipulatableTable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTable, useSortBy, useRowState } from 'react-table';\n/**\n * Hook to define a table that supports various manipulations.\n * Currently supports limited conditional formatting and sorting by single or multiple columns.\n * Uses react-table.\n * @author Claire Wagner\n * @param columns The columns to display in the table\n * (must conform to react-table specifications: https://react-table.tanstack.com/docs/api/useTable).\n * @param data The data to display in the table\n * (must conform to react-table specifications: https://react-table.tanstack.com/docs/api/useTable).\n * @returns A div containing the table.\n * Portions of this hook are based on https://stackoverflow.com/a/69128343 (CC BY-SA 4.0 license),\n * https://github.com/TanStack/react-table/blob/v7/examples/basic/src/App.js (MIT license), and\n * https://github.com/TanStack/react-table/tree/v7/examples/sorting (MIT license).\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ManipulatableTable(_ref) {\n  _s();\n\n  let {\n    columns,\n    data\n  } = _ref;\n  // The table instance\n  const table = useTable({\n    columns: columns,\n    data: data,\n    disableSortRemove: true,\n    initialCellStateAccessor: cell => ({\n      backgroundColor: null\n    })\n  }, useSortBy, useRowState);\n  /**\n   * Function to apply conditional formatting to the cells in the specified column.\n   * Applies the specified background color to all cells in that column with values\n   * that are less than the comparand.\n   * @param comparand The comparand against which to compare cell values.\n   * @param columnID The id of the column to which to apply the conditional formatting.\n   * @param color The background color to apply.\n   * Postcondition: The background colors of all cells in the given column with values that are\n   * less than the comparand have been set to the specified color. The background colors of all\n   * other cells in that column have been set to null. No other cell's background color has been\n   * changed.\n  */\n\n  function applyConditionalFormatting(comparand, columnID, color) {\n    //const columnID = 'td';\n    //const comparand = e.target.value;\n    // apply conditional formatting if that \n    if (!isNaN(parseInt(comparand))) {\n      table.rows.forEach(row => {\n        row.cells.forEach(cell => {\n          cell.setState(oldval => {\n            return {\n              backgroundColor: cell.column.id === columnID ? cell.value < comparand ? color : null : oldval\n            };\n          });\n        });\n      });\n    }\n  }\n\n  ; // Render the table UI \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", { ...table.getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: table.headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 37\n            }, this), column.id !== 'name' && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: ['highlight stats less than: ', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 76\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  placeholder: \"enter comparand\",\n                  onChange: e => {\n                    applyConditionalFormatting(e.target.value, column.id, 'cyan');\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...table.getTableBodyProps(),\n        children: table.rows.map((row, i) => {\n          table.prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps([{\n                  style: {\n                    backgroundColor: cell.state.backgroundColor\n                  }\n                }]),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ManipulatableTable, \"J6wqgimbSa/Cs8zg/88k+HNK8UM=\", false, function () {\n  return [useTable];\n});\n\n_c = ManipulatableTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManipulatableTable\");","map":{"version":3,"sources":["/Users/Marion/Desktop/csci335/pyball/prototype/pyball/src/ManipulateSpreadsheet/ManipulatableTable.js"],"names":["React","useTable","useSortBy","useRowState","ManipulatableTable","columns","data","table","disableSortRemove","initialCellStateAccessor","cell","backgroundColor","applyConditionalFormatting","comparand","columnID","color","isNaN","parseInt","rows","forEach","row","cells","setState","oldval","column","id","value","getTableProps","headerGroups","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","e","target","getTableBodyProps","i","prepareRow","getRowProps","getCellProps","style","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useTable, useSortBy, useRowState } from 'react-table';\n\n/**\n * Hook to define a table that supports various manipulations.\n * Currently supports limited conditional formatting and sorting by single or multiple columns.\n * Uses react-table.\n * @author Claire Wagner\n * @param columns The columns to display in the table\n * (must conform to react-table specifications: https://react-table.tanstack.com/docs/api/useTable).\n * @param data The data to display in the table\n * (must conform to react-table specifications: https://react-table.tanstack.com/docs/api/useTable).\n * @returns A div containing the table.\n * Portions of this hook are based on https://stackoverflow.com/a/69128343 (CC BY-SA 4.0 license),\n * https://github.com/TanStack/react-table/blob/v7/examples/basic/src/App.js (MIT license), and\n * https://github.com/TanStack/react-table/tree/v7/examples/sorting (MIT license).\n */\nexport function ManipulatableTable({columns, data}) {\n\n    // The table instance\n    const table = useTable(\n        {\n            columns: columns,\n            data: data,\n            disableSortRemove: true,\n            initialCellStateAccessor: cell => ({ backgroundColor: null })\n        },\n        useSortBy,\n        useRowState\n    );\n\n    /**\n     * Function to apply conditional formatting to the cells in the specified column.\n     * Applies the specified background color to all cells in that column with values\n     * that are less than the comparand.\n     * @param comparand The comparand against which to compare cell values.\n     * @param columnID The id of the column to which to apply the conditional formatting.\n     * @param color The background color to apply.\n     * Postcondition: The background colors of all cells in the given column with values that are\n     * less than the comparand have been set to the specified color. The background colors of all\n     * other cells in that column have been set to null. No other cell's background color has been\n     * changed.\n    */\n    function applyConditionalFormatting(comparand, columnID, color) {\n        //const columnID = 'td';\n        //const comparand = e.target.value;\n        // apply conditional formatting if that \n        if (!isNaN(parseInt(comparand))) {\n            table.rows.forEach(row => {\n                row.cells.forEach(cell => {\n                    cell.setState( (oldval) => {\n                        return (\n                            { backgroundColor: \n                                cell.column.id === columnID ? (cell.value < comparand ? color : null) : oldval}\n                        );\n                    });\n                })\n            });\n        }\n    };\n\n    // Render the table UI \n    return (\n        <div>\n            <table {...table.getTableProps()}>\n                <thead>\n                    {table.headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                    {column.render('Header')}\n                                    <span>\n                                        {column.isSorted ? (column.isSortedDesc ? ' ðŸ”½': ' ðŸ”¼') : ''}\n                                    </span>\n                                    {column.id !== 'name' &&\n                                    <div>\n                                        <label>\n                                            {'highlight stats less than: '}<br></br>\n                                            <input placeholder='enter comparand' onChange={ (e) => \n                                                { applyConditionalFormatting(\n                                                    e.target.value, column.id, 'cyan');\n                                                } \n                                            } />\n                                        </label>\n                                    </div>}\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...table.getTableBodyProps()}>\n                    {table.rows.map((row, i) => {\n                        table.prepareRow(row);\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return (\n                                        <td {...cell.getCellProps([{\n                                            style: { backgroundColor: cell.state.backgroundColor }\n                                        }])}>\n                                            {cell.render('Cell')}\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}